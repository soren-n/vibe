name: Dependency Security Audit
description: Comprehensive security audit of project dependencies across multiple
  package managers.
triggers:
  - security audit
  - dependency security
  - vulnerability scan
  - security check
  - package vulnerabilities
  - audit dependencies
steps:
  - 'Install audit tools: Set up security scanning tools appropriate for your package
    manager (npm audit, pip-audit, bundle audit).'
  - 'Run native vulnerability scan: Execute built-in security audit commands (npm audit,
    pip-audit --format json).'
  - 'Check for known vulnerabilities: Query package security databases for CVEs in current
    dependencies.'
  - 'Scan for outdated packages: Identify packages with available security updates using
    outdated package detection.'
  - 'Review transitive dependencies: Examine indirect dependencies for security issues
    and licensing conflicts.'
  - 'Validate package sources: Verify packages originate from trusted repositories and
    maintainers.'
  - 'Check for typosquatting: Ensure package names match intended dependencies without
    suspicious variations.'
  - 'Analyze package metadata: Review publication dates, maintainer activity, and download
    statistics for anomalies.'
  - 'Document security findings: Record vulnerabilities, their impact, and remediation
    status.'
  - 'Implement automated monitoring: Configure dependency scanning in CI/CD pipelines
    for ongoing security assessment.'
  - 'Create update strategy: Define process for applying security patches and testing
    compatibility.'
  - 'Establish security policy: Document procedures for handling critical vulnerabilities
    and incident response.'
dependencies: []
project_types:
  - python
  - javascript
  - typescript
  - nodejs
  - ruby
  - java
  - go
conditions: []
