dependencies: []
description: guidance for evaluating new dependencies before adding them to a project.
name: new-dependency-evaluation
project_types: []
steps:
  - 'Clear functional requirement: defined for this dependency'
  - 'Standard library alternatives: thoroughly explored'
  - 'Package: actively maintained with recent commits and releases'
  - 'Ensure: Package has good documentation with examples and API reference'
  - 'Ensure: Package supports all target Python versions for the project'
  - 'Ensure: Package has reasonable test coverage and CI setup'
  - 'Package size and transitive dependencies: acceptable'
  - 'Package license: compatible with project requirements'
  - 'Ensure: Package has good community support and issue response time'
  - 'Breaking change history and versioning practices: acceptable'
  - 'Security track record: reviewed (no major vulnerabilities)'
  - 'Ensure: Package maintainer reputation and backup maintainers exist'
  - 'Integration test: performed in project environment'
  - 'Impact on build/startup time: measured'
  - 'Ensure: Fallback plan exists if package becomes unavailable'
  - Ensure Package can be made optional if it's not core functionality
  - 'Team agreement on adding this dependency: reached'
triggers:
  - new dependency
  - add package
  - dependency evaluation
  - package assessment
