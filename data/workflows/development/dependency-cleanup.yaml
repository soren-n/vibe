name: Dependency Cleanup and Minimization
description: Systematically reduce and clean up project dependencies for improved
  security and performance.
triggers:
  - clean dependencies
  - minimize dependencies
  - reduce dependencies
  - dependency cleanup
  - remove unused packages
  - optimize dependencies
steps:
  - 'Document current state: Create backup of package manifests (package.json, requirements.txt,
    etc.) before changes.'
  - 'Run security audit: Execute npm audit, pip-audit, or equivalent to identify vulnerabilities.'
  - 'Analyze usage patterns: Use static analysis tools to identify unused imports and
    dependencies.'
  - 'Remove unused dependencies: Uninstall packages that are not imported or referenced
    in the codebase.'
  - 'Evaluate dev dependencies: Move development-only packages from production dependencies
    to dev dependencies.'
  - 'Consolidate overlapping packages: Replace multiple packages with single alternatives
    that provide similar functionality.'
  - 'Remove redundant tooling: Eliminate meta-packages when individual components are
    already installed.'
  - 'Replace heavyweight dependencies: Substitute large dependencies with lighter alternatives
    where feasible.'
  - 'Update CI workflows: Remove obsolete workarounds and installation steps for removed
    dependencies.'
  - 'Test functionality: Run complete test suite to verify no functionality is broken.'
  - 'Verify build process: Ensure build and deployment processes work with reduced dependencies.'
  - 'Update documentation: Revise installation instructions and dependency documentation.'
  - 'Monitor metrics: Track improvements in installation time, bundle size, and security
    posture.'
dependencies: []
project_types:
  - python
  - javascript
  - typescript
  - nodejs
conditions: []
