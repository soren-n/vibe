name: Dependency Selection Strategy
description: Strategic workflow for choosing the right dependencies for your project.
triggers:
  - choose dependencies
  - dependency selection
  - pick packages
  - dependency strategy
  - package evaluation
steps:
  - 'Define requirements: Clearly specify what functionality you need before searching
    for packages.'
  - 'Research options: Use PyPI search, GitHub curated lists, and community recommendations.'
  - 'Evaluate package health: Check GitHub stars, last commit date, issue response time,
    and maintainer activity.'
  - 'Assess stability: Review version history, breaking changes, and semantic versioning
    practices.'
  - 'Check compatibility: Verify Python version support and compatibility with existing
    dependencies.'
  - 'Analyze size impact: Consider package size and transitive dependencies using `pip
    show` or wheel inspection.'
  - 'Review documentation: Ensure adequate documentation, examples, and API reference.'
  - 'Test integration: Create a minimal test to verify the package works in your environment.'
  - 'Consider maintenance: Evaluate if you could maintain/fork the package if needed.'
  - 'Plan fallback strategy: Design graceful degradation if the dependency becomes unavailable.'
  - 'Make optional when possible: Use try/except imports for non-critical features.'
  - 'Document decision: Record why you chose this dependency and any trade-offs made.'
dependencies: []
project_types:
  - python
conditions: []
