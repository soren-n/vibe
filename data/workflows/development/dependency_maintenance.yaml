name: Dependency Maintenance and Updates
description: Ongoing maintenance strategy for keeping dependencies up-to-date and
  healthy
triggers:
  - dependency updates
  - package maintenance
  - dependency monitoring
  - update dependencies
  - dependency lifecycle
steps:
  - 'Set up automated monitoring: Configure Dependabot, Renovate, or similar tools for
    update notifications'
  - 'Create update schedule: Establish regular intervals for dependency review (monthly/quarterly)'
  - 'Categorize dependencies: Group dependencies by criticality (core, development,
    optional)'
  - 'Test update procedures: Establish safe update workflow with rollback capabilities'
  - 'Monitor deprecation notices: Track package deprecation announcements and migration
    guides'
  - 'Review changelog analysis: Read changelogs for breaking changes before updating'
  - 'Implement staged updates: Update non-critical dependencies first, then core dependencies'
  - 'Comprehensive tests: Execute full test suite after each dependency update'
  - 'Monitor performance impact: Check for performance regressions after updates'
  - 'Update security patches: Prioritize security-related updates regardless of schedule'
  - 'Document update decisions: Record why updates were applied or deferred'
  - 'Plan migration strategies: Prepare for major version updates that require code
    changes'
  - 'Backup before updates: Ensure reliable rollback mechanism before applying updates'
  - 'Communicate changes: Inform team about significant dependency changes and impacts'
dependencies: []
project_types:
  - python
conditions: []
