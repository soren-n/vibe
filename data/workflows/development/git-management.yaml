name: git_management
description: Git project management, semantic versioning, and repository ops (concise).
triggers:
  - git.*setup
  - git.*init
  - git.*config
  - git.*management
  - version.*control
  - repository.*setup
  - semantic.*version
  - versioning
  - semver
  - release.*management
  - branch.*strategy
  - git.*workflow
  - conventional.*commits
  - changelog
  - git.*hooks
  - commit.*format
  - tag.*management
  - release.*tag
  - project.*version
  - version.*bump
steps:
  - 'Semantic Versioning Strategy: Use MAJOR.MINOR.PATCH format (breaking.feature.fix)
    for clear version communication.'
  - 'Branch Strategy: Use `patch/vX.Y.Z` for fixes (merge immediately), `minor/vX.Y.0`
    for features (merge when ready), `major/vX.0.0` for breaking changes (postpone &
    collect).'
  - 'Check Repo Status: `git status` and `git branch --show-current`.'
  - 'Configure Git: Set `git config user.name "Your Name"` and `git config user.email
    "email@example.com"` if not configured.'
  - "Initialize Repo: If no repo, `git init && git add . && git commit -m 'feat: initial
    commit'`."
  - 'Conventional Commits: Use format `type(scope): description` where type is feat/fix/docs/style/refactor/test/chore/perf/ci/build.'
  - 'Breaking Changes: Add `!` after type (`feat!:`) or `BREAKING CHANGE:` in footer
    for major version bumps.'
  - 'Create Semantic Branches: Use `git checkout -b patch/v1.2.1` for fixes, `minor/v1.3.0`
    for features, `major/v2.0.0` for breaking changes.'
  - 'Tag Releases: Create annotated tags with `git tag -a v1.0.0 -m "Release version
    1.0.0"` and push with `git push origin v1.0.0`.'
  - "Daily Workflow: `git status && git add . && git commit -m 'type: desc' && git
    push origin <branch>`."
  - 'Merge Strategy: Immediate merge for patch/minor branches, postpone major branches
    to collect breaking changes.'
  - 'Release Checklist: Verify tests pass, docs updated, changelog prepared, then merge
    → tag → push → release notes.'
  - 'Change Analysis: Bug fixes → patch branch, new features → minor branch, breaking
    changes → major branch.'
dependencies: []
project_types: []
conditions: []
