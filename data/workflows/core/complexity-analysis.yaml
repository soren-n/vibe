name: Code Complexity Analysis and Reduction
description: Analyze code complexity and reduce it through systematic refactoring.
triggers:
  - analyze complexity
  - complexity analysis
  - complexity validation
  - reduce complexity
  - refactor complex code
  - simplify code structure
steps:
  - 'Run complexity analysis: Use static analysis tools to identify functions and methods exceeding complexity thresholds.'
  - 'Apply function extraction: Split complex functions into focused helper functions with single responsibilities.'
  - 'Execute validation tests: Run test suite after each refactoring step to ensure no functional regressions.'
  - 'Re-analyze complexity metrics: Run complexity analysis again to confirm measurable improvement in code structure.'
  - 'Update documentation: Revise function documentation to reflect new structure and clarify purpose.'
  - 'Review architectural patterns: Consider design patterns that can reduce complexity at the system level.'
dependencies: []
items:
  - 'High-complexity functions identified: Functions exceeding complexity thresholds have been found using static analysis tools.'
  - 'Complexity metrics generated: Analysis has identified functions with concerning complexity scores based on control flow and structural measures.'
  - 'Refactoring targets prioritized: Highest complexity functions with clear separation opportunities have been identified for focused improvement.'
  - 'Functionality preservation verified: Full test suite passes before any complexity reduction work begins.'
  - 'Complexity reduction confirmed: Re-analysis shows measurable improvement in complexity metrics after refactoring.'
  - 'Documentation accuracy verified: Function documentation accurately reflects new structure and purpose after refactoring.'
