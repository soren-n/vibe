name: Code Quality Validation
description: Execute comprehensive code quality checks including linting, formatting, type checking, and security validation.
triggers:
  - best practices
  - check
  - check quality
  - check standards
  - clean
  - code quality
  - code review
  - compliance
  - fix
  - format
  - lint
  - quality
  - quality check
  - quality validation
  - standards
  - style
  - validate code
  - validate quality
  - verify compliance
steps:
  - 'Run static analysis: Execute linting tools to identify code style issues and potential problems.'
  - 'Auto-fix issues: Apply automatic fixes for code style and formatting issues where possible.'
  - 'Format code: Apply consistent code formatting according to project standards.'
  - 'Type validation: Run type checking tools to validate type annotations and catch type-related issues.'
  - 'Execute test suite: Run comprehensive test suite to ensure functionality works correctly.'
  - 'Security validation: Execute security scanning tools to identify potential vulnerabilities.'
  - 'Review quality metrics: Check code complexity, coverage, and other quality measurements.'
  - 'Validate documentation: Ensure code documentation meets professional standards.'
dependencies: []
project_types: []
conditions: []
items:
  - Type validation passes without errors when applicable to the project language.
  - Code follows professional language standards with no informal or decorative elements.
  - Documentation uses formal, accessible language appropriate for enterprise environments.
  - Public APIs have clear, professional documentation.
  - Dependencies have no known security vulnerabilities.
  - All automated quality checks pass before considering work complete.
  - Quality automation is configured for ongoing validation.
  - Documentation accurately reflects current code behavior and structure.
  - Tests provide adequate coverage for functionality.
  - Security scans show no critical vulnerabilities.
  - Code follows consistent formatting standards across the project.
  - Complexity metrics are within acceptable thresholds.
  - All functions and components have appropriate documentation.
  - Error handling is implemented where needed.
  - Tests cover critical functionality and edge cases.
  - No debugging code or temporary statements left in production code.
  - Dependencies are up to date and secure.
  - Code complexity is manageable and maintainable.
  - Performance considerations have been addressed.
  - Code is ready for deployment or integration.
