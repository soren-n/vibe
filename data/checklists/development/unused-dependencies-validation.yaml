name: Unused Dependencies Validation Checklist
description: Comprehensive validation checklist for unused dependency detection and cleanup
triggers:
  - unused dependencies validation
  - dependency analysis validation
  - dependency cleanup validation
  - unused code validation
project_types:
  - typescript
  - javascript
  - nodejs
conditions: []
dependencies: []
items:
  - Analysis tool configuration is properly configured for the project structure.
  - All entry points are correctly defined in the analysis configuration.
  - Project file patterns accurately include all source files.
  - Dependencies marked as unused are genuinely not needed.
  - Development dependencies marked as unused are not required for build or development.
  - Exports marked as unused are not part of the public API.
  - Files marked as unused are not referenced by dynamic imports or external tools.
  - Language configuration files are properly recognized by the analysis tool.
  - Build tool configurations are included in entry patterns.
  - Test files and their dependencies are properly handled.
  - Configuration files for development tools are recognized.
  - Binary dependencies and CLI tools are not incorrectly marked as unused.
  - Workspace and monorepo configurations are properly set up if applicable.
  - False positives are documented in ignore patterns.
  - Intentionally unused exports are marked with appropriate documentation tags.
  - Dynamic imports and module loading patterns are handled correctly.
  - Analysis configurations account for framework-specific patterns.
  - Production vs development modes are properly configured.
  - Automated cleanup suggestions have been reviewed before applying.
  - Project build scripts still work after dependency removal.
  - CI/CD pipelines function correctly with cleaned dependencies.
  - Documentation reflects current dependency requirements.
  - Bundle size reduction is measured and documented if significant.
  - All team members are aware of changes to dependencies.
  - Dependency removal follows proper semantic versioning practices.
