name: Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. 0.6.1)'
        required: true
        type: string
      pre-release:
        description: 'Create a pre-release'
        required: false
        type: boolean
        default: false
  push:
    tags:
      - 'v*'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run quality checks (release-grade)
        run: npm run quality:release

      - name: Build project
        run: npm run build

      - name: Validate CLI functionality
        run: |
          node dist/src/cli.js --help
          node dist/src/cli.js checklists list --format json
          node dist/src/cli.js workflows list --format json

  build-extension:
    name: Build VS Code Extension
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install main dependencies
        run: npm ci

      - name: Build main project
        run: npm run build

      - name: Install extension dependencies
        run: |
          cd vscode-extension
          npm ci

      - name: Copy bundled MCP servers to extension
        run: |
          mkdir -p vscode-extension/bundled
          cp dist/src/cli.js vscode-extension/bundled/mcp-server.js

      - name: Update extension data
        run: |
          cp -r data vscode-extension/data

      - name: Build extension
        run: |
          cd vscode-extension
          npm run compile

      - name: Package extension
        run: |
          cd vscode-extension
          npm run package

      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: vscode-extension/*.vsix

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, build-extension]
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') }}

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download extension artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode-extension
          path: ./

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          name: Release ${{ github.event.inputs.version || github.ref_name }}
          prerelease: ${{ github.event.inputs.pre-release || false }}
          files: |
            *.vsix
          generate_release_notes: true

  publish-extension:
    name: Publish to VS Code Marketplace
    runs-on: ubuntu-latest
    needs: [validate, build-extension]
    if: ${{ github.event_name == 'workflow_dispatch' && !github.event.inputs.pre-release }}
    environment: marketplace

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install main dependencies
        run: npm ci

      - name: Build main project
        run: npm run build

      - name: Install extension dependencies
        run: |
          cd vscode-extension
          npm ci

      - name: Copy bundled MCP servers to extension
        run: |
          mkdir -p vscode-extension/bundled
          cp dist/src/cli.js vscode-extension/bundled/mcp-server.js

      - name: Update extension data
        run: |
          cp -r data vscode-extension/data

      - name: Build and publish extension
        run: |
          cd vscode-extension
          npm run compile
          npm run publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
