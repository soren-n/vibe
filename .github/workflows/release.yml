name: Release

# üöÄ Python Release Pipeline
#
# This workflow implements a comprehensive Python release pipeline with:
#
# üìã Pipeline Stages:
# 1. Quality Checks - Linting, testing, type checking
# 2. Semantic Release - Automated versioning and changelog
# 3. VS Code Extension - Build and publish extension
# 4. TestPyPI Publish - Test package publishing (validation step)
# 5. PyPI Publish - Production package publishing
#
# üéØ Best Practices Implemented:
# - Semantic versioning (MAJOR.MINOR.PATCH)
# - Test-first publishing (TestPyPI before PyPI)
# - Fail-safe mechanisms (each step depends on previous)
# - Quality gates (linting, testing, type checking)
# - Automated changelog generation
# - Git tag-based versioning with hatch-vcs
#
# üîß Version Management:
# - Uses semantic-release for automated version bumps
# - Git tags drive package versioning via hatch-vcs
# - Conventional commits determine version increments
# - CHANGELOG.md automatically updated
#
# üõ°Ô∏è Safety Measures:
# - TestPyPI validation before production PyPI
# - Quality checks must pass before any publishing
# - Manual workflow_dispatch for emergency releases
# - Skip duplicate uploads with --skip-existing
#
# üì¶ Package Publishing:
# - Built with `uv build` for fast, reliable builds
# - Published via gh-action-pypi-publish (recommended)
# - Supports both PyPI and TestPyPI repositories
# - Environment variables for secure authentication

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.13

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Install dependencies
      run: uv sync --dev

    - name: Run pre-commit hooks
      run: |
        uv run pre-commit install
        uv run pre-commit run --all-files

    - name: Run tests
      run: uv run pytest -v --cov=vibe --cov-report=xml

    - name: Validate workflows
      run: |
        uv run python -c "
        from vibe.workflows.loader import WorkflowLoader
        loader = WorkflowLoader()
        workflows = loader.load_workflows()
        print(f'‚úÖ Successfully loaded {len(workflows)} workflows')
        "

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.13

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Python dependencies
      run: uv sync --dev

    - name: Install VS Code extension dependencies
      run: |
        cd vscode-extension
        npm ci

    - name: Make scripts executable
      run: chmod +x scripts/sync_versions.py

    - name: Install semantic-release
      run: |
        npm install -g semantic-release
        npm install -g @semantic-release/changelog
        npm install -g @semantic-release/exec
        npm install -g @semantic-release/git
        npm install -g @semantic-release/github
        npm install -g @semantic-release/commit-analyzer
        npm install -g @semantic-release/release-notes-generator
        npm install -g conventional-changelog-conventionalcommits

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Run semantic release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        VSCE_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
      run: semantic-release

    - name: Upload VS Code extension artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vscode-extension
        path: vscode-extension/*.vsix
        retention-days: 30

  testpypi-publish:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/vibe-soren-n
    permissions:
      id-token: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.13

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Build package
      # üì¶ Build with uv for fast, reliable builds
      # Uses hatch-vcs to automatically determine version from git tags
      # Creates both wheel (.whl) and source distribution (.tar.gz)
      run: uv build

    - name: Publish to TestPyPI
      # üß™ Test publishing step - validates package before production
      # Uses trusted publishing (OIDC) for secure authentication
      # --skip-existing prevents errors on duplicate uploads
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [release, testpypi-publish]
    if: github.ref == 'refs/heads/main'
    environment:
      name: pypi
      url: https://pypi.org/p/vibe-soren-n
    permissions:
      id-token: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.13

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Build package
      # üì¶ Production build - same package as tested on TestPyPI
      # Version determined by git tag created in semantic-release step
      # Reproducible builds ensure consistency with TestPyPI
      run: uv build

    - name: Publish to PyPI
      # üöÄ Production publishing - only runs if TestPyPI succeeded
      # Uses trusted publishing for secure, token-free authentication
      # Final step in the release pipeline
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
