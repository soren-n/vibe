name: "📖 Documentation-driven development workflow"
description: "Implement documentation-first development approach, ensuring documentation guides implementation"
triggers:
  - "document first"
  - "documentation driven"
  - "spec driven development"
  - "design documentation"
  - "document before code"
  - "design first"
project_types:
  - "python"
  - "typescript"
  - "vue"
  - "javascript"
  - "rust"
  - "go"
  - "general"
dependencies:
  - "docs directory structure"
  - "text editor for documentation"
conditions:
  - "When starting new features or modules"
  - "When system architecture needs definition"
  - "When API design is required"
  - "When establishing project standards"
steps:
  - "🎯 **Define Requirements First**: Document what needs to be built, who will use it, and success criteria before writing any code"
  - "🏗️ **Design Architecture**: Create component diagrams, data flow documentation, and technology decisions with integration points"
  - "📋 **Specify APIs**: Define endpoints, request/response schemas, authentication, and error handling before implementation"
  - "🗃️ **Model Data Structures**: Document entity relationships, schema definitions, validation rules, and migration strategies"
  - "👥 **Map User Workflows**: Design user journeys, component specifications, interaction patterns, and accessibility requirements"
  - "📝 **Create Implementation Guide**: Break down into tasks, define acceptance criteria, identify dependencies, and plan testing approach"
  - "🧪 **Design Tests from Docs**: Turn specifications into test cases, validate API contracts, and create tests from documentation examples"
  - "📊 **Establish Quality Metrics**: Ensure completeness (all APIs documented), accuracy (examples work), usability (clear structure)"
  - "🔄 **Plan Iterative Updates**: Set up review cycles to update docs with implementation learnings and capture deviations"
  - "✅ **Pre-Code Checklist**: Verify requirements defined, architecture documented, APIs specified, stakeholders reviewed before coding"
  - "⚖️ **Implementation Alignment**: Ensure code follows documented specs, document deviations with reasons, capture implementation decisions"
  - "🔄 **Post-Implementation Sync**: Update documentation with learnings, test examples, verify user guides match actual behavior"
