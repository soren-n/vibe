name: "Documentation review and improvement"
description: "Analyze existing documentation, identify gaps, and suggest improvements for knowledge accumulation"
triggers:
  - "review documentation"
  - "check docs"
  - "documentation audit"
  - "improve docs"
  - "documentation gaps"
  - "knowledge review"
project_types:
  - "python"
  - "typescript"
  - "vue"
  - "javascript"
  - "rust"
  - "go"
  - "general"
dependencies:
  - "git (for analyzing recent changes)"
  - "find command (for discovering files)"
conditions:
  - "When documentation needs review or improvement"
  - "After significant development sessions"
  - "Before project milestones"
  - "When onboarding new contributors"
steps:
  - "Discover Documentation: Find Markdown files (*.md) in the project to map existing docs, and locate README files for entry points"
  - "Analyze Structure: Check for documentation directories, ADRs (architecture decision records), and documentation organization patterns"
  - "Review Recent Activity: Use `git log --oneline --since='2 weeks ago'` to identify commits that might need documentation updates"
  - "Check Modified Files: Look for recently changed code files (Python, TypeScript, JavaScript, Vue, Rust, Go, Markdown) that need doc updates"
  - "Identify API Gaps: Look for public functions without docstrings, complex algorithms needing explanation, undocumented configuration files"
  - "Audit Architecture Docs: Verify design decisions are documented, significant changes have ADRs, system architecture is explained"
  - "Review User-Facing Docs: Ensure README is comprehensive, installation instructions clear, usage examples provided, API documented"
  - "Check Development Docs: Verify coding standards, contribution guidelines, development setup, and testing procedures are documented"
  - "Apply Best Practices: Keep docs close to code, document \"why\" not just \"what\", include examples, maintain with code changes"
  - "Execute Improvements: Update README for evolution, create ADRs for undocumented decisions, add inline docs for complex functions"
  - "Validate Examples: Ensure all documentation examples still work and are up-to-date with current codebase"
  - "Health Check: Verify README exists, architecture documented, code has inline docs, setup instructions clear, examples current"
  - "Be token‑thrifty: summarize findings in ≤6 bullets, avoid long diffs, and link to sources instead of pasting large excerpts."
