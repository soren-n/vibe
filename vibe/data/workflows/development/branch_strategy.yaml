name: branch_strategy
description: Comprehensive branch strategy guidance
triggers:
- ai.*branch
- branch.*create
- branch.*created
- branch.*guidance
- branch.*name
- branch.*strategy
- branch.*strategy.*complete
- breaking.*change
- major.*change
- merge.*strategy
- merge.*timing
- new.*branch
- should.*merge
- validate.*branch.*strategy
- verify.*versioning
- what.*branch
- when.*merge
steps:
- 'Check current status: `git branch --show-current && git tag --sort=-version:refname
  | head -5`'
- 'Update main branch: `git checkout main && git pull origin main`'
- 'Analyze change type: Determine if bug fix (patch), new feature (minor), or breaking
  change (major)'
- 'Create appropriate branch: `git checkout -b patch/vX.Y.Z` or `git checkout -b minor/vX.Y.0`
  or `git checkout -b major/vX.0.0`'
- 'Make your changes with conventional commits: `git commit -m ''fix: description''`
  or `git commit -m ''feat: description''`'
- 'Run tests: `uv run pytest` or project test command'
- 'Push branch: `git push -u origin branch-name`'
- 'Create pull request: Use GitHub UI or `gh pr create`'
- 'For major changes: Plan migration guide and coordinate timing'
dependencies: []
project_types: []
conditions: []
items:
- Branch name follows convention (patch/minor/major + version)
- Change type correctly matches impact (patch/minor/major)
- Conventional commit format is used consistently
- All tests pass on the feature branch
- No breaking changes in patch or minor branches
- Version numbering follows semantic versioning
- Pull request includes proper description
- 'For major changes: migration guide is prepared'
- Merge timing is appropriate for change type
- Branch is up to date with main before merge
