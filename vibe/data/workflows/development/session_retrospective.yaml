name: Session retrospective and knowledge capture
description: Comprehensive session retrospective guidance
triggers:
- capture knowledge
- check.*session.*quality
- document session
- knowledge accumulation
- lessons learned
- session retrospective
- session review
- update learnings
- validate.*session.*retrospective
- verify.*retrospective.*complete
project_types:
- python
- typescript
- vue
- javascript
- rust
- go
- general
dependencies:
- git (for analyzing recent changes)
conditions:
- After significant development sessions
- When new patterns or solutions are discovered
- After solving complex problems
- When architectural decisions are made
steps:
- 'Show recent commits: `git log --oneline --since=''3 hours ago''`'
- 'List modified files: `git diff --name-only HEAD~5..HEAD | head -20`'
- 'Show change statistics: `git diff --stat HEAD~5..HEAD`'
- 'List new files created: `git log --diff-filter=A --name-only --since=''3 hours
  ago''`'
- Document key insights in existing project documentation
- 'Clean temporary files: `find . -name ''debug*'' -o -name ''*.tmp'' -o -name ''*.bak''
  | head -10`'
- 'Check working tree: `git status --porcelain`'
items:
- Recent commits accurately reflect work accomplished
- All modified files serve clear functional purposes
- Code changes align with original session objectives
- New patterns or solutions are properly documented
- Configuration changes are intentional and tested
- Documentation updates match code changes
- Key learnings capture valuable insights for future reference
- Architectural decisions are well-reasoned and documented
- Problem solutions are clearly explained and reusable
- Workflow improvements provide measurable benefits
- Tool evaluations include pros/cons and recommendations
- Documentation is current, accurate, and complete
- Session notes include actionable next steps
- Temporary files are properly cleaned up
- Working tree is clean with all important changes committed
- Session objectives were achieved or progress documented
