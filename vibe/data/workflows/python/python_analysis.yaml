name: python_analysis
description: Comprehensive python analysis guidance
triggers:
- analysis.*complete
- analyze.*project
- examine.*codebase
- explore.*code
- investigate.*project
- project.*overview
- python.*analysis.*done
- review.*structure
- understand.*structure
- validate.*python.*analysis
- verify.*project.*analysis
steps:
- 'Find Python files: `find . -name ''*.py'' | grep -v -E ''(.venv|__pycache__)''
  | head -20`'
- 'Count Python files: `find . -name ''*.py'' | grep -v -E ''(.venv|__pycache__)''
  | wc -l`'
- 'Show project structure: `tree -I ''.venv|__pycache__|*.pyc'' -L 3`'
- 'Check configuration files: `ls -la pyproject.toml requirements.txt setup.py 2>/dev/null`'
- 'List dependencies: `uv tree` or `cat pyproject.toml | grep -A 20 dependencies`'
- 'Find test files: `find . -name ''test_*.py'' -o -name ''*_test.py'' | grep -v .venv`'
- 'List documentation: `find . -name ''*.md'' -o -name ''*.rst'' | head -10`'
- 'Generate analysis report: Summarize findings and recommendations'
project_types:
- python
conditions:
- pattern:*.py
items:
- All Python files have been discovered and counted
- Project structure is clearly understood
- Configuration files are identified and reviewed
- Dependencies are documented and analyzed
- Test coverage is assessed and documented
- Documentation quality is evaluated
- Improvement opportunities are identified
- Architecture patterns are understood
- Code quality issues are noted
- Analysis findings are clearly summarized
